function copyAttrs(e, t) { for (let r of e.attributes) "class" == r.name ? r.value.split(" ").forEach(e => t.classList.add(e)) : t.setAttribute(r.name, r.value) } var NavTree = function (e) { this.props = e, this.element = document.querySelector(this.props.obj_id), this.searchable = this.element.dataset.hasOwnProperty("searchable"), this.showEmptyGroups = this.element.dataset.hasOwnProperty("showEmptyGroups"), this.chevronIcon = '<i class="fas fa-chevron-right"></i>', this.linkIcon = '<i class="fas fa-link"></i>', this.searchInput = '<input type="text" name="menu-tree-search" id="menu-tree-search" class="form-control" placeholder="Search">', this.init = function () { if (!this.parent) { var e = document.createElement("div"); e.setAttribute("id", "nav-tree-wrapper"), this.element.parentElement.replaceChild(e, this.element), e.appendChild(this.element), this.parent = e } if (this.element.classList.add("nav", "flex-column"), this.element.querySelectorAll("ul").forEach(e => e.classList.add("nav", "flex-column")), this.element.querySelectorAll("li").forEach(e => { const t = e.getAttribute("id"); e.classList.add("nav-item"); const r = e.querySelector("a"); r.classList.add("nav-link"), r.setAttribute("id", "tree-link-" + t); var s = document.createElement("span"); if (s.classList.add("d-inline-block", "tree-icon"), s.style.width = "25px", r.prepend(s), e.querySelector("ul")) { r.classList.add("tree-group-link"), r.setAttribute("data-bs-toggle", "collapse"), r.setAttribute("role", "button"), r.setAttribute("aria-expanded", "false"), r.setAttribute("href", "#nav-tree-list-wrapper-" + t), r.setAttribute("aria-controls", "nav-tree-list-wrapper-" + t), s.innerHTML = this.chevronIcon; const i = e.querySelector("ul"); var a = document.createElement("div"); a.classList.add("collapse", "ms-4"), a.setAttribute("id", "nav-tree-list-wrapper-" + t), e.replaceChild(a, i), a.appendChild(i), new bootstrap.Collapse(a, { toggle: !1 }), a.addEventListener("show.bs.collapse", e => { e.target.parentElement.querySelector(".tree-icon i").classList.replace("fa-chevron-right", "fa-chevron-down") }), a.addEventListener("hide.bs.collapse", e => { e.target.parentElement.querySelector(".tree-icon i").classList.replace("fa-chevron-down", "fa-chevron-right"), e.target.querySelector(".collapse") && bootstrap.Collapse.getInstance(e.target.querySelector(".collapse")).hide() }) } else r.classList.add("tree-link"), s.innerHTML = this.linkIcon, r.addEventListener("click", () => { this.parent.querySelectorAll("a.tree-link").forEach(e => { e.classList.remove("active") }), r.classList.add("active") }); s.firstElementChild.setAttribute("id", "tree-icon-" + t) }), this.searchable) { var t = document.createElement("div"); t.setAttribute("id", "nav-tree-search-wrapper"), t.classList.add("my-2"), this.parent.prepend(t), t.innerHTML = this.searchInput, t.firstChild.addEventListener("keyup", e => { const t = Array.from(document.querySelectorAll("li")); t.forEach(e => e.classList.remove("d-none")), "" !== e.target.value && (t.filter(t => !t.querySelector("a").text.toLowerCase().includes(e.target.value)).forEach(e => e.classList.add("d-none")), t.filter(e => e.querySelector("a").classList.contains("tree-group-link")).forEach(e => { if (Array.from(e.querySelectorAll("li")).filter(e => !e.classList.contains("d-none")).length > 0) { const t = e.querySelector(".collapse"); t.classList.add("no-transition"), bootstrap.Collapse.getInstance(t).show(), e.classList.remove("d-none"), t.classList.remove("no-transition") } else this.showEmptyGroups || e.classList.add("d-none") })) }) } }, this.update = function (e) { const t = this.element.cloneNode(!0); this.parent.innerHTML = e, this.element = this.parent.querySelector("ul"), this.init(), Array.from(t.querySelectorAll("[id]")).map(e => e.getAttribute("id")).forEach(e => { var r = this.element.querySelector("#" + e), s = t.querySelector("#" + e); r && s && copyAttrs(s, r) }) }, this.init() };